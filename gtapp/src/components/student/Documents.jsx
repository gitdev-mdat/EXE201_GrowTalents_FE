import React, { useState } from "react";
import styles from "../../styles/StudentDocuments.module.css";
import toan from "../../assets/Math1.svg";
import english from "../../assets/english.svg";
import physic from "../../assets/physic.svg";

const Documents = () => {
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [selectedCourse, setSelectedCourse] = useState("all");
  const [showSubmitModal, setShowSubmitModal] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const documents = [
    {
      id: 1,
      title: "B√†i t·∫≠p ch∆∞∆°ng 1: S·ªë t·ª± nhi√™n",
      course: "Kho√° h·ªçc to√°n c∆° b·∫£n 6",
      category: "B√†i t·∫≠p",
      teacher: "C√¥ Nguy·ªÖn Th·ªã Anh",
      uploadDate: "2024-01-10",
      dueDate: "2024-01-15",
      status: "Ch∆∞a n·ªôp",
      fileType: "pdf",
      fileSize: "2.5 MB",
      courseImage: toan
    },
    {
      id: 2,
      title: "T√†i li·ªáu l√Ω thuy·∫øt ch∆∞∆°ng 2",
      course: "Kho√° h·ªçc to√°n c∆° b·∫£n 6",
      category: "T√†i li·ªáu",
      teacher: "C√¥ Nguy·ªÖn Th·ªã Anh",
      uploadDate: "2024-01-08",
      dueDate: null,
      status: "ƒê√£ xem",
      fileType: "pdf",
      fileSize: "1.8 MB",
      courseImage: toan
    },
    {
      id: 3,
      title: "B√†i t·∫≠p v·ªÅ nh√† tu·∫ßn 2",
      course: "Kho√° h·ªçc to√°n c∆° b·∫£n 7",
      category: "B√†i t·∫≠p",
      teacher: "Th·∫ßy Tr·∫ßn VƒÉn B√¨nh",
      uploadDate: "2024-01-12",
      dueDate: "2024-01-18",
      status: "ƒê√£ n·ªôp",
      fileType: "docx",
      fileSize: "1.2 MB",
      courseImage: toan
    },
    {
      id: 4,
      title: "Vocabulary List - Unit 1",
      course: "Kho√° h·ªçc ti·∫øng Anh c∆° b·∫£n",
      category: "T√†i li·ªáu",
      teacher: "C√¥ Sarah Johnson",
      uploadDate: "2024-01-09",
      dueDate: null,
      status: "ƒê√£ xem",
      fileType: "pdf",
      fileSize: "0.8 MB",
      courseImage: english
    },
    {
      id: 5,
      title: "Grammar Exercise - Present Simple",
      course: "Kho√° h·ªçc ti·∫øng Anh c∆° b·∫£n",
      category: "B√†i t·∫≠p",
      teacher: "C√¥ Sarah Johnson",
      uploadDate: "2024-01-11",
      dueDate: "2024-01-16",
      status: "Ch∆∞a n·ªôp",
      fileType: "docx",
      fileSize: "1.5 MB",
      courseImage: english
    },
    {
      id: 6,
      title: "B√†i t·∫≠p V·∫≠t l√Ω - Chuy·ªÉn ƒë·ªông c∆° h·ªçc",
      course: "Kho√° h·ªçc V·∫≠t l√Ω c∆° b·∫£n",
      category: "B√†i t·∫≠p",
      teacher: "Th·∫ßy L√™ VƒÉn C∆∞·ªùng",
      uploadDate: "2024-01-13",
      dueDate: "2024-01-20",
      status: "Ch∆∞a n·ªôp",
      fileType: "pdf",
      fileSize: "3.2 MB",
      courseImage: physic
    }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case "ƒê√£ n·ªôp":
        return "#52c41a";
      case "Ch∆∞a n·ªôp":
        return "#ff4d4f";
      case "ƒê√£ xem":
        return "#1890ff";
      default:
        return "#d9d9d9";
    }
  };

  const getFileTypeIcon = (fileType) => {
    switch (fileType) {
      case "pdf":
        return "üìÑ";
      case "docx":
        return "üìù";
      case "pptx":
        return "üìä";
      default:
        return "üìÅ";
    }
  };

  const filteredDocuments = documents.filter(doc => {
    const categoryMatch = selectedCategory === "all" || doc.category === selectedCategory;
    const courseMatch = selectedCourse === "all" || doc.course === selectedCourse;
    return categoryMatch && courseMatch;
  });

  const handleSubmitAssignment = (doc) => {
    setSelectedDocument(doc);
    setShowSubmitModal(true);
    setUploadedFile(null);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Ki·ªÉm tra file type
      if (file.type !== 'application/pdf') {
        alert('Vui l√≤ng ch·ªâ upload file PDF!');
        return;
      }
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        alert('File qu√° l·ªõn! Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB.');
        return;
      }
      setUploadedFile(file);
    }
  };

  const handleSubmit = async () => {
    if (!uploadedFile) {
      alert('Vui l√≤ng ch·ªçn file ƒë·ªÉ n·ªôp b√†i!');
      return;
    }

    setIsSubmitting(true);
    
    // Simulate API call
    setTimeout(() => {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong danh s√°ch
      const updatedDocuments = documents.map(doc => 
        doc.id === selectedDocument.id 
          ? { ...doc, status: "ƒê√£ n·ªôp" }
          : doc
      );
      
      // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t
      console.log('N·ªôp b√†i th√†nh c√¥ng:', {
        documentId: selectedDocument.id,
        fileName: uploadedFile.name,
        fileSize: uploadedFile.size
      });
      
      setIsSubmitting(false);
      setShowSubmitModal(false);
      setSelectedDocument(null);
      setUploadedFile(null);
      
      // Refresh page ho·∫∑c c·∫≠p nh·∫≠t state
      window.location.reload();
    }, 2000);
  };

  const closeModal = () => {
    setShowSubmitModal(false);
    setSelectedDocument(null);
    setUploadedFile(null);
  };

  return (
    <div className={styles.documentsContainer}>
      <div className={styles.header}>
        <h1>T√†i li·ªáu v√† B√†i t·∫≠p</h1>
        <div className={styles.filters}>
          <select 
            className={styles.filterSelect}
            value={selectedCourse}
            onChange={(e) => setSelectedCourse(e.target.value)}
          >
            <option value="all">T·∫•t c·∫£ kh√≥a h·ªçc</option>
            <option value="Kho√° h·ªçc to√°n c∆° b·∫£n 6">To√°n c∆° b·∫£n 6</option>
            <option value="Kho√° h·ªçc to√°n c∆° b·∫£n 7">To√°n c∆° b·∫£n 7</option>
            <option value="Kho√° h·ªçc ti·∫øng Anh c∆° b·∫£n">Ti·∫øng Anh c∆° b·∫£n</option>
            <option value="Kho√° h·ªçc V·∫≠t l√Ω c∆° b·∫£n">V·∫≠t l√Ω c∆° b·∫£n</option>
          </select>
          <select 
            className={styles.filterSelect}
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
          >
            <option value="all">T·∫•t c·∫£ lo·∫°i</option>
            <option value="T√†i li·ªáu">T√†i li·ªáu</option>
            <option value="B√†i t·∫≠p">B√†i t·∫≠p</option>
          </select>
        </div>
      </div>

      <div className={styles.documentsGrid}>
        {filteredDocuments.map((doc) => (
          <div key={doc.id} className={styles.documentCard}>
            <div className={styles.documentHeader}>
              <div className={styles.courseInfo}>
                <img src={doc.courseImage} alt={doc.course} className={styles.courseImage} />
                <span className={styles.courseName}>{doc.course}</span>
              </div>
              <span 
                className={styles.statusBadge}
                style={{backgroundColor: getStatusColor(doc.status)}}
              >
                {doc.status}
              </span>
            </div>
            
            <div className={styles.documentContent}>
              <h3>{doc.title}</h3>
              <p className={styles.category}>{doc.category}</p>
              <p className={styles.teacher}>Gi√°o vi√™n: {doc.teacher}</p>
              
              <div className={styles.fileInfo}>
                <span className={styles.fileIcon}>{getFileTypeIcon(doc.fileType)}</span>
                <span className={styles.fileType}>{doc.fileType.toUpperCase()}</span>
                <span className={styles.fileSize}>{doc.fileSize}</span>
              </div>
              
              <div className={styles.dateInfo}>
                <p>Ng√†y ƒëƒÉng: {doc.uploadDate}</p>
                {doc.dueDate && (
                  <p className={styles.dueDate}>H·∫°n n·ªôp: {doc.dueDate}</p>
                )}
              </div>
            </div>
            
            <div className={styles.documentActions}>
              <button className={styles.downloadBtn}>T·∫£i xu·ªëng</button>
              <button className={styles.viewBtn}>Xem tr∆∞·ªõc</button>
              {doc.category === "B√†i t·∫≠p" && doc.status === "Ch∆∞a n·ªôp" && (
                <button 
                  className={styles.submitBtn}
                  onClick={() => handleSubmitAssignment(doc)}
                >
                  N·ªôp b√†i
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {filteredDocuments.length === 0 && (
        <div className={styles.emptyState}>
          <p>Kh√¥ng c√≥ t√†i li·ªáu n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.</p>
        </div>
      )}

      {/* Modal N·ªôp b√†i */}
      {showSubmitModal && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <div className={styles.modalHeader}>
              <h2>N·ªôp b√†i t·∫≠p</h2>
              <button className={styles.closeBtn} onClick={closeModal}>√ó</button>
            </div>
            
            <div className={styles.modalContent}>
              <div className={styles.assignmentInfo}>
                <h3>{selectedDocument?.title}</h3>
                <p><strong>Kh√≥a h·ªçc:</strong> {selectedDocument?.course}</p>
                <p><strong>Gi√°o vi√™n:</strong> {selectedDocument?.teacher}</p>
                {selectedDocument?.dueDate && (
                  <p><strong>H·∫°n n·ªôp:</strong> {selectedDocument?.dueDate}</p>
                )}
              </div>

              <div className={styles.uploadSection}>
                <h4>Upload b√†i l√†m</h4>
                <div className={styles.uploadArea}>
                  <input
                    type="file"
                    id="fileUpload"
                    accept=".pdf"
                    onChange={handleFileUpload}
                    className={styles.fileInput}
                  />
                  <label htmlFor="fileUpload" className={styles.uploadLabel}>
                    <div className={styles.uploadIcon}>üìÑ</div>
                    <p>Ch·ªçn file PDF ƒë·ªÉ n·ªôp b√†i</p>
                    <span className={styles.uploadHint}>
                      Ch·ªâ ch·∫•p nh·∫≠n file PDF, t·ªëi ƒëa 10MB
                    </span>
                  </label>
                </div>
                
                {uploadedFile && (
                  <div className={styles.filePreview}>
                    <div className={styles.fileInfo}>
                      <span className={styles.fileIcon}>üìÑ</span>
                      <div>
                        <p className={styles.fileName}>{uploadedFile.name}</p>
                        <p className={styles.fileSize}>
                          {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                    </div>
                    <button 
                      className={styles.removeFileBtn}
                      onClick={() => setUploadedFile(null)}
                    >
                      ‚úï
                    </button>
                  </div>
                )}
              </div>

              <div className={styles.requirements}>
                <h4>Y√™u c·∫ßu n·ªôp b√†i:</h4>
                <ul>
                  <li>Ch·ªâ ch·∫•p nh·∫≠n file ƒë·ªãnh d·∫°ng PDF</li>
                  <li>K√≠ch th∆∞·ªõc file t·ªëi ƒëa 10MB</li>
                  <li>ƒê·∫£m b·∫£o b√†i l√†m r√µ r√†ng, d·ªÖ ƒë·ªçc</li>
                  <li>Ghi r√µ h·ªç t√™n v√† l·ªõp ·ªü ƒë·∫ßu b√†i l√†m</li>
                </ul>
              </div>
            </div>

            <div className={styles.modalActions}>
              <button 
                className={styles.cancelBtn}
                onClick={closeModal}
                disabled={isSubmitting}
              >
                H·ªßy
              </button>
              <button 
                className={styles.confirmBtn}
                onClick={handleSubmit}
                disabled={!uploadedFile || isSubmitting}
              >
                {isSubmitting ? 'ƒêang n·ªôp...' : 'N·ªôp b√†i'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Documents; 